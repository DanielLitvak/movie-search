{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["corsProxy","App","useState","movies","setMovies","searchString","setSearchString","getMovieDataByTitle","title","a","fetch","toLocaleLowerCase","then","res","json","response","movieObject","d","l","imageUrl","i","year","y","useCallback","body","text","IMDBTop250MoviesHTML","tempElement","document","createElement","innerHTML","topMoviesTitles","index","evaluate","stringValue","push","moviePromises","map","Promise","allSettled","topMovies","useEffect","stubMovies","newMovieList","filter","movie","includes","className","type","name","placeholder","value","onChange","event","target","key","src","alt","width","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"gOAIMA,EAAY,uCA+GHC,MA7Gf,WAAgB,IAAD,EACeC,mBAAS,IADxB,mBACNC,EADM,KACEC,EADF,OAE2BF,mBAAS,IAFpC,mBAENG,EAFM,KAEQC,EAFR,KAQPC,EAAmB,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,sEACHC,MACrBV,EAAS,kDACoCQ,EAAM,GAAGG,oBAD7C,YACoEH,EADpE,UAETI,MAAK,SAACC,GAAD,OAASA,EAAIC,UAJM,cACpBC,EADoB,OAMpBC,EAAcD,EAASE,EAAE,GANL,kBAOnB,CACLT,MAAOQ,EAAYE,EACnBC,SAAUH,EAAYI,EAAED,SACxBE,KAAML,EAAYM,IAVM,2CAAH,sDA0EzB,OA5D0BC,sBAAW,sBAAC,0CAAAd,EAAA,sEACDC,MACjCV,EAAY,kDACZY,MAAK,SAACY,GAAD,OAAUA,EAAKC,UAHc,OASpC,IARMC,EAD8B,QAI9BC,EAAcC,SAASC,cAAc,QAC/BC,UAAYJ,EAClBK,EAAkB,GAGfC,EAAQ,EAAGA,GAAS,IAAKA,IAAU,EACXJ,SAASK,SAAT,qBACfD,EADe,aAE7BL,EACA,KACA,GAJmBnB,EADoB,EACjC0B,YAORH,EAAgBI,KAAK3B,GAjBa,OAoB9B4B,EAAgBL,EAAgBM,KAAI,SAAC7B,GACzC,OAAOD,EAAoBC,MArBO,UAwBZ8B,QAAQC,WAAWH,GAxBP,eAwB9BI,EAxB8B,yBAyB7BA,GAzB6B,4CA0BnC,IAEHC,qBACE,WAWErC,EAAUsC,KAEZ,IAKFD,qBAAU,WACR,GAAIpC,EAAc,CAChB,IAAMsC,EAAeD,EAAWE,QAAO,SAACC,GAAD,OACrCA,EAAMrC,MACHG,oBACAmC,SAASzC,EAAaM,wBAE3BP,EAAUuC,QAEVvC,EAAUsC,KAEX,CAACrC,IAGF,yBAAK0C,UAAU,OACb,wBAAIA,UAAU,SAAd,gBACA,2BACEC,KAAK,SACLC,KAAK,eACLF,UAAU,eACVG,YAAY,wBACZC,MAAO9C,EACP+C,SAvFqB,SAACC,GAC1B/C,EAAgB+C,EAAMC,OAAOH,UAwF3B,yBAAKJ,UAAU,oBACZ5C,EAAOkC,KAAI,SAACQ,GACX,OACE,yBAAKU,IAAKV,EAAMrC,MAAOuC,UAAU,cAC/B,4BACGF,EAAMrC,MADT,KACkBqC,EAAMxB,KADxB,KAGA,yBAAKmC,IAAKX,EAAM1B,SAAUsC,IAAKZ,EAAMrC,MAAOkD,MAAM,iBC9F5CC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFtC,SAASuC,eAAe,SD+HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1D,MAAK,SAAC2D,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.eee7e2ec.chunk.js","sourcesContent":["import React, { useEffect, useState, useCallback } from \"react\";\nimport \"./App.scss\";\nimport stubMovies from \"./moveis.json\";\n\nconst corsProxy = \"https://cors-anywhere.herokuapp.com/\";\n\nfunction App() {\n  const [movies, setMovies] = useState([] as Movie[]);\n  const [searchString, setSearchString] = useState(\"\");\n\n  const handleSearchString = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchString(event.target.value);\n  };\n\n  const getMovieDataByTitle = async (title: string) => {\n    const response = await fetch(\n      corsProxy +\n        `https://v2.sg.media-imdb.com/suggestion/${title[0].toLocaleLowerCase()}/${title}.json`\n    ).then((res) => res.json());\n\n    const movieObject = response.d[0];\n    return {\n      title: movieObject.l,\n      imageUrl: movieObject.i.imageUrl,\n      year: movieObject.y,\n    } as Movie;\n  };\n\n  const getTopRatedMovies = useCallback(async () => {\n    const IMDBTop250MoviesHTML = await fetch(\n      corsProxy + \"https://www.imdb.com/chart/top/?ref_=nv_mv_250\"\n    ).then((body) => body.text());\n    const tempElement = document.createElement(\"div\");\n    tempElement.innerHTML = IMDBTop250MoviesHTML;\n    const topMoviesTitles = [];\n\n    // up to 250 movies\n    for (let index = 1; index <= 250; index++) {\n      const { stringValue: title } = document.evaluate(\n        `//tbody/tr[${index}]/td[2]/a`,\n        tempElement,\n        null,\n        2\n      );\n\n      topMoviesTitles.push(title);\n    }\n\n    const moviePromises = topMoviesTitles.map((title) => {\n      return getMovieDataByTitle(title);\n    });\n\n    const topMovies = await Promise.allSettled(moviePromises);\n    return topMovies;\n  }, []);\n\n  useEffect(\n    () => {\n      // (async () => {\n      //   const moviesResult = await getTopRatedMovies();\n      //   const fullfilledMovies = moviesResult.filter(\n      //     (movie) => movie.status === \"fulfilled\"\n      //   ) as PromiseFulfilledResult<Movie>[];\n\n      //   const movies = fullfilledMovies.map((movie) => movie.value);\n      //   console.log(movies);\n      // setMovies(stubMovies);\n      // })();\n      setMovies(stubMovies);\n    },\n    [\n      // getTopRatedMovies\n    ]\n  );\n\n  useEffect(() => {\n    if (searchString) {\n      const newMovieList = stubMovies.filter((movie) =>\n        movie.title\n          .toLocaleLowerCase()\n          .includes(searchString.toLocaleLowerCase())\n      );\n      setMovies(newMovieList);\n    } else {\n      setMovies(stubMovies);\n    }\n  }, [searchString]);\n\n  return (\n    <div className=\"App\">\n      <h1 className=\"title\">Movie Search</h1>\n      <input\n        type=\"search\"\n        name=\"movie-search\"\n        className=\"search-input\"\n        placeholder=\"search for a movie...\"\n        value={searchString}\n        onChange={handleSearchString}\n      />\n      <div className=\"movies-container\">\n        {movies.map((movie) => {\n          return (\n            <div key={movie.title} className=\"movie-item\">\n              <h2>\n                {movie.title} ({movie.year})\n              </h2>\n              <img src={movie.imageUrl} alt={movie.title} width=\"250px\" />\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}